name: PR Summary

on:
  pull_request:
    types: [closed]
  workflow_dispatch:

jobs:
  generate_summary:
    if: github.event.pull_request.merged == true 
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install openai PyGithub
    - name: Generate PR summary
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_PAT }}
      run: |
        python .github/scripts/generate_summary.py
        
        pr_number = ${{ github.event.pull_request.number }}
        pr_author = "${{ github.event.pull_request.user.login }}"
        merged_by = "${{ github.event.pull_request.merged_by.login }}"
        
        reviews = []
        for review in github.pulls.listReviews(owner, repo, pr_number):
          if review.state == "APPROVED":
            reviews.append(f"{review.user.login} approved the PR")
        review_summary = "\n".join(reviews)
        
        comments = []  
        for comment in github.issues.listComments(owner, repo, pr_number):
          comments.append(f"{comment.user.login}: {comment.body}")
        comment_summary = "\n".join(comments)
        
        report = f"""
        # Pull Request Summary
        
        ## Overview
        - PR #{pr_number} was opened by {pr_author}
        - PR was merged by {merged_by}
        
        ## Reviews
        {review_summary}
        
        ## Comments  
        {comment_summary}
        """
        
        with open("pr_summary.md", "w") as f:
          f.write(report)
        
    - uses: actions/upload-artifact@v4
      with:
        name: pr-summary-report
        path: pr_summary.md
